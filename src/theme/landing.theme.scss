//
// _functions.scss
//

/// Replaces a substring within another string.
/// @author Hugo Giraudel
/// @param {string} $string String.
/// @param {string} $search Substring.
/// @param {string} $replace Replacement.
/// @return {string} Updated string.
@function str-replace($string, $search, $replace: '') {

        $index: str-index($string, $search);

        @if $index {
                @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
        }

        @return $string;

}

/// Replaces a substring within each string in a list.
/// @param {list} $strings List of strings.
/// @param {string} $search Substring.
/// @param {string} $replace Replacement.
/// @return {list} Updated list of strings.
@function str-replace-all($strings, $search, $replace: '') {

        @each $string in $strings {
                $strings: set-nth($strings, index($strings, $string), str-replace($string, $search, $replace));
        }

        @return $strings;

}

// Mixins.

/// Vendorizes a declaration's property and/or value(s).
/// @param {string} $property Property.
/// @param {mixed} $value String/list of value(s).
@mixin vendor($property, $value) {

        // Determine if property should expand.
        $expandProperty: index($vendor-properties, $property);

        // Determine if value should expand (and if so, add '-prefix-' placeholder).
        $expandValue: false;

        @each $x in $value {
                @each $y in $vendor-values {
                        @if $y == str-slice($x, 1, str-length($y)) {

                                $value: set-nth($value, index($value, $x), '-prefix-' + $x);
                                $expandValue: true;

                        }
                }
        }

        // Expand property?
        @if $expandProperty {
                @each $vendor in $vendor-prefixes {
                        #{$vendor}#{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
                }
        }

                // Expand just the value?
        @elseif $expandValue {
                @each $vendor in $vendor-prefixes {
                        #{$property}: #{str-replace-all($value, '-prefix-', $vendor)};
                }
        }

                // Neither? Treat them as a normal declaration.
        @else {
                #{$property}: #{$value};
        }

}

//
// _vars.scss
//

// Misc.
$misc: (
        max-spotlights:		10,
        max-features:		10,
        z-index-base:		10000
);

// Duration.
$duration: (
        transitions:		0.2s,
        menu:				0.5s,
        fadein:				3s
);

// Size.
$size: (
        element-height:		2.75em,
        element-margin:		2em,
        letter-spacing:		0.075em,
        letter-spacing-alt:	0.225em
);

// Font.
$font: (
        family:				$sans-serif,
        weight:				600,
        weight-bold:		600,
        weight-extrabold:	600
);

// Palette.
$palette: (
        bg:					#2e3842,
        fg:					#fff,
        fg-bold:			#fff,
        fg-light:			rgba(255,255,255,0.5),
        border:				#fff,
        border-bg:			rgba(144,144,144,0.25),
        border2:			#fff,
        border2-bg:			rgba(144,144,144,0.5),

        accent1: (
                bg:				#21b2a6,
                fg-bold:		#ffffff,
                fg:				mix(#21b2a6, #ffffff, 25%),
                fg-light:		mix(#21b2a6, #ffffff, 40%),
                border:			rgba(0,0,0,0.125),
                border-bg:		rgba(255,255,255,0.075),
                border2:		rgba(0,0,0,0.25),
                border2-bg:		rgba(255,255,255,0.2)
        ),

        accent2: (
                bg:				#00ffcc,
                fg-bold:		#ffffff,
                fg:				mix(#00ffcc, #ffffff, 25%),
                fg-light:		mix(#00ffcc, #ffffff, 40%),
                border:			rgba(0,0,0,0.125),
                border-bg:		rgba(255,255,255,0.075),
                border2:		rgba(0,0,0,0.25),
                border2-bg:		rgba(255,255,255,0.2)
        ),

        accent3: (
                bg:				#00f0ff,
                fg-bold:		#ffffff,
                fg:				mix(#00f0ff, #ffffff, 25%),
                fg-light:		mix(#00f0ff, #ffffff, 40%),
                border:			rgba(0,0,0,0.125),
                border-bg:		rgba(255,255,255,0.075),
                border2:		rgba(0,0,0,0.25),
                border2-bg:		rgba(255,255,255,0.2)
        ),

        accent4: (
                bg:				#76ddff,
                fg-bold:		#ffffff,
                fg:				mix(#76ddff, #ffffff, 25%),
                fg-light:		mix(#76ddff, #ffffff, 40%),
                border:			rgba(0,0,0,0.125),
                border-bg:		rgba(255,255,255,0.075),
                border2:		rgba(0,0,0,0.25),
                border2-bg:		rgba(255,255,255,0.2)
        ),

        accent5: (
                bg:				#505393,
                fg-bold:		#ffffff,
                fg:				mix(#505393, #ffffff, 25%),
                fg-light:		mix(#505393, #ffffff, 40%),
                border:			rgba(0,0,0,0.125),
                border-bg:		rgba(255,255,255,0.075),
                border2:		rgba(0,0,0,0.25),
                border2-bg:		rgba(255,255,255,0.2)
        ),

        accent6: (
                bg:				#ed4933,
                fg-bold:		#ffffff,
                fg:				mix(#ed4933, #ffffff, 25%),
                fg-light:		mix(#ed4933, #ffffff, 40%),
                border:			rgba(0,0,0,0.125),
                border-bg:		rgba(255,255,255,0.075),
                border2:		rgba(0,0,0,0.25),
                border2-bg:		rgba(255,255,255,0.2)
        ),

        accent7: (
                bg:				#ffffff,
                fg-bold:		#2E3842,
                fg:				#4E4852,
                fg-light:		#8E8892,
                border:			#dfdfdf,
                border-bg:		rgba(0,0,0,0.0375),
                border2:		#bfbfbf,
                border2-bg:		rgba(0,0,0,0.1)
        )
);

//
// _vendor.scss
//

// vendor.scss v1.0 | @ajlkn | MIT licensed */

// Vars.

/// Vendor prefixes.
/// @var {list}
$vendor-prefixes: (
        '-moz-',
        '-webkit-',
        '-ms-',
        ''
);

/// Properties that should be vendorized.
/// Data via caniuse.com, github.com/postcss/autoprefixer, and developer.mozilla.org
/// @var {list}
$vendor-properties: (

        // Animation.
        'animation',
        'animation-delay',
        'animation-direction',
        'animation-duration',
        'animation-fill-mode',
        'animation-iteration-count',
        'animation-name',
        'animation-play-state',
        'animation-timing-function',

                // Appearance.
        'appearance',

                // Backdrop filter.
        'backdrop-filter',

                // Background image options.
        'background-clip',
        'background-origin',
        'background-size',

                // Box sizing.
        'box-sizing',

                // Clip path.
        'clip-path',

                // Filter effects.
        'filter',

                // Flexbox.
        'align-content',
        'align-items',
        'align-self',
        'flex',
        'flex-basis',
        'flex-direction',
        'flex-flow',
        'flex-grow',
        'flex-shrink',
        'flex-wrap',
        'justify-content',
        'order',

                // Font feature.
        'font-feature-settings',
        'font-language-override',
        'font-variant-ligatures',

                // Font kerning.
        'font-kerning',

                // Fragmented borders and backgrounds.
        'box-decoration-break',

                // Grid layout.
        'grid-column',
        'grid-column-align',
        'grid-column-end',
        'grid-column-start',
        'grid-row',
        'grid-row-align',
        'grid-row-end',
        'grid-row-start',
        'grid-template-columns',
        'grid-template-rows',

                // Hyphens.
        'hyphens',
        'word-break',

                // Masks.
        'mask',
        'mask-border',
        'mask-border-outset',
        'mask-border-repeat',
        'mask-border-slice',
        'mask-border-source',
        'mask-border-width',
        'mask-clip',
        'mask-composite',
        'mask-image',
        'mask-origin',
        'mask-position',
        'mask-repeat',
        'mask-size',

                // Multicolumn.
        'break-after',
        'break-before',
        'break-inside',
        'column-count',
        'column-fill',
        'column-gap',
        'column-rule',
        'column-rule-color',
        'column-rule-style',
        'column-rule-width',
        'column-span',
        'column-width',
        'columns',

                // Object fit.
        'object-fit',
        'object-position',

                // Regions.
        'flow-from',
        'flow-into',
        'region-fragment',

                // Scroll snap points.
        'scroll-snap-coordinate',
        'scroll-snap-destination',
        'scroll-snap-points-x',
        'scroll-snap-points-y',
        'scroll-snap-type',

                // Shapes.
        'shape-image-threshold',
        'shape-margin',
        'shape-outside',

                // Tab size.
        'tab-size',

                // Text align last.
        'text-align-last',

                // Text decoration.
        'text-decoration-color',
        'text-decoration-line',
        'text-decoration-skip',
        'text-decoration-style',

                // Text emphasis.
        'text-emphasis',
        'text-emphasis-color',
        'text-emphasis-position',
        'text-emphasis-style',

                // Text size adjust.
        'text-size-adjust',

                // Text spacing.
        'text-spacing',

                // Transform.
        'transform',
        'transform-origin',

                // Transform 3D.
        'backface-visibility',
        'perspective',
        'perspective-origin',
        'transform-style',

                // Transition.
        'transition',
        'transition-delay',
        'transition-duration',
        'transition-property',
        'transition-timing-function',

                // Unicode bidi.
        'unicode-bidi',

                // User select.
        'user-select',

                // Writing mode.
        'writing-mode',

);

/// Values that should be vendorized.
/// Data via caniuse.com, github.com/postcss/autoprefixer, and developer.mozilla.org
/// @var {list}
$vendor-values: (

        // Cross fade.
        'cross-fade',

                // Element function.
        'element',

                // Filter function.
        'filter',

                // Flexbox.
        'flex',
        'inline-flex',

                // Grab cursors.
        'grab',
        'grabbing',

                // Gradients.
        'linear-gradient',
        'repeating-linear-gradient',
        'radial-gradient',
        'repeating-radial-gradient',

                // Grid layout.
        'grid',
        'inline-grid',

                // Image set.
        'image-set',

                // Intrinsic width.
        'max-content',
        'min-content',
        'fit-content',
        'fill',
        'fill-available',
        'stretch',

                // Sticky position.
        'sticky',

                // Transform.
        'transform',

                // Zoom cursors.
        'zoom-in',
        'zoom-out',

);

//
// _mixins.scss
//

/// Applies padding to an element, taking the current element-margin value into account.
/// @param {mixed} $tb Top/bottom padding.
/// @param {mixed} $lr Left/right padding.
/// @param {list} $pad Optional extra padding (in the following order top, right, bottom, left)
/// @param {bool} $important If true, adds !important.
@mixin padding($tb, $lr, $pad: (0,0,0,0), $important: null) {

        @if $important {
                $important: '!important';
        }

        $x: 0.1em;

        @if unit(_size(element-margin)) == 'rem' {
                $x: 0.1rem;
        }

        padding: ($tb + nth($pad,1)) ($lr + nth($pad,2)) max($x, $tb - _size(element-margin) + nth($pad,3)) ($lr + nth($pad,4)) #{$important};

}

//
// _breakpoints.scss
//

// breakpoints.scss v1.0 | @ajlkn | MIT licensed */

// Vars.

/// Breakpoints.
/// @var {list}
$breakpoints: () !global;

// Mixins.

/// Sets breakpoints.
/// @param {map} $x Breakpoints.
@mixin breakpoints($x: ()) {
        $breakpoints: $x !global;
}

/// Wraps @content in a @media block targeting a specific orientation.
/// @param {string} $orientation Orientation.
@mixin orientation($orientation) {
        @media screen and (orientation: #{$orientation}) {
                @content;
        }
}

/// Wraps @content in a @media block using a given query.
/// @param {string} $query Query.
@mixin breakpoint($query: null) {

        $breakpoint: null;
        $op: null;
        $media: null;

        // Determine operator, breakpoint.

        // Greater than or equal.
        @if (str-slice($query, 0, 2) == '>=') {

                $op: 'gte';
                $breakpoint: str-slice($query, 3);

        }

                // Less than or equal.
        @elseif (str-slice($query, 0, 2) == '<=') {

                $op: 'lte';
                $breakpoint: str-slice($query, 3);

        }

                // Greater than.
        @elseif (str-slice($query, 0, 1) == '>') {

                $op: 'gt';
                $breakpoint: str-slice($query, 2);

        }

                // Less than.
        @elseif (str-slice($query, 0, 1) == '<') {

                $op: 'lt';
                $breakpoint: str-slice($query, 2);

        }

                // Not.
        @elseif (str-slice($query, 0, 1) == '!') {

                $op: 'not';
                $breakpoint: str-slice($query, 2);

        }

                // Equal.
        @else {

                $op: 'eq';
                $breakpoint: $query;

        }

        // Build media.
        @if ($breakpoint and map-has-key($breakpoints, $breakpoint)) {

                $a: map-get($breakpoints, $breakpoint);

                // Range.
                @if (type-of($a) == 'list') {

                        $x: nth($a, 1);
                        $y: nth($a, 2);

                        // Max only.
                        @if ($x == null) {

                                // Greater than or equal (>= 0 / anything)
                                @if ($op == 'gte') {
                                        $media: 'screen';
                                }

                                        // Less than or equal (<= y)
                                @elseif ($op == 'lte') {
                                        $media: 'screen and (max-width: ' + $y + ')';
                                }

                                        // Greater than (> y)
                                @elseif ($op == 'gt') {
                                        $media: 'screen and (min-width: ' + ($y + 1) + ')';
                                }

                                        // Less than (< 0 / invalid)
                                @elseif ($op == 'lt') {
                                        $media: 'screen and (max-width: -1px)';
                                }

                                        // Not (> y)
                                @elseif ($op == 'not') {
                                        $media: 'screen and (min-width: ' + ($y + 1) + ')';
                                }

                                        // Equal (<= y)
                                @else {
                                        $media: 'screen and (max-width: ' + $y + ')';
                                }

                        }

                                // Min only.
                        @else if ($y == null) {

                                // Greater than or equal (>= x)
                                @if ($op == 'gte') {
                                        $media: 'screen and (min-width: ' + $x + ')';
                                }

                                        // Less than or equal (<= inf / anything)
                                @elseif ($op == 'lte') {
                                        $media: 'screen';
                                }

                                        // Greater than (> inf / invalid)
                                @elseif ($op == 'gt') {
                                        $media: 'screen and (max-width: -1px)';
                                }

                                        // Less than (< x)
                                @elseif ($op == 'lt') {
                                        $media: 'screen and (max-width: ' + ($x - 1) + ')';
                                }

                                        // Not (< x)
                                @elseif ($op == 'not') {
                                        $media: 'screen and (max-width: ' + ($x - 1) + ')';
                                }

                                        // Equal (>= x)
                                @else {
                                        $media: 'screen and (min-width: ' + $x + ')';
                                }

                        }

                                // Min and max.
                        @else {

                                // Greater than or equal (>= x)
                                @if ($op == 'gte') {
                                        $media: 'screen and (min-width: ' + $x + ')';
                                }

                                        // Less than or equal (<= y)
                                @elseif ($op == 'lte') {
                                        $media: 'screen and (max-width: ' + $y + ')';
                                }

                                        // Greater than (> y)
                                @elseif ($op == 'gt') {
                                        $media: 'screen and (min-width: ' + ($y + 1) + ')';
                                }

                                        // Less than (< x)
                                @elseif ($op == 'lt') {
                                        $media: 'screen and (max-width: ' + ($x - 1) + ')';
                                }

                                        // Not (< x and > y)
                                @elseif ($op == 'not') {
                                        $media: 'screen and (max-width: ' + ($x - 1) + '), screen and (min-width: ' + ($y + 1) + ')';
                                }

                                        // Equal (>= x and <= y)
                                @else {
                                        $media: 'screen and (min-width: ' + $x + ') and (max-width: ' + $y + ')';
                                }

                        }

                }

                        // String.
                @else {

                        // Missing a media type? Prefix with "screen".
                        @if (str-slice($a, 0, 1) == '(') {
                                $media: 'screen and ' + $a;
                        }

                                // Otherwise, use as-is.
                        @else {
                                $media: $a;
                        }

                }

        }

        // Output.
        @media #{$media} {
                @content;
        }

}

//
// _functions.scss
//

/// Gets a value from a map.
/// @author Hugo Giraudel
/// @param {map} $map Map.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function val($map, $keys...) {

        @each $key in $keys {
                $map: map-get($map, $key);
        }

        @return $map;

}

/// Gets a duration value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _duration($keys...) {
        @return val($duration, $keys...);
}

/// Gets a font value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _font($keys...) {
        @return val($font, $keys...);
}

/// Gets a misc value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _misc($keys...) {
        @return val($misc, $keys...);
}

/// Gets a palette value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _palette($keys...) {
        @return val($palette, $keys...);
}

/// Gets a size value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _size($keys...) {
        @return val($size, $keys...);
}

//
// main.scss
//

/*
	Spectral by HTML5 UP
	html5up.net | @ajlkn
	Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
*/

// Breakpoints.

@include breakpoints((
        xlarge:   ( 1281px,  1680px ),
        large:    ( 981px,   1280px ),
        medium:   ( 737px,   980px  ),
        small:    ( 481px,   736px  ),
        xsmall:   ( null,    480px  ),
));
/* Basic */

@-ms-viewport {
        width: device-width;
}

// Set box model to border-box.
// Based on css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
html {
        box-sizing: border-box;
}

*, *:before, *:after {
        box-sizing: inherit;
}

body {
        // Stops initial animations until page loads.
        &.is-preload {
                *, *:before, *:after {
                        @include vendor('animation', 'none !important');
                        @include vendor('transition', 'none !important');
                }
        }

}

#page-wrapper {
        color: _palette(fg);
        font-family: _font(family);
        font-size: 15pt;
        font-weight: _font(weight);
        letter-spacing: _size(letter-spacing);
        line-height: 1.65em;

        @include breakpoint('<=xlarge') {
                font-size: 13pt;
        }

        @include breakpoint('<=large') {
                font-size: 12pt;
        }

        @include breakpoint('<=small') {
                font-size: 11pt;
                letter-spacing: _size(letter-spacing) * 0.5;
        }

        a {
                color: _palette(fg-bold);
        }
        h2 {
                color: _palette(fg-bold);
                font-weight: _font(weight-extrabold);
                letter-spacing: _size(letter-spacing-alt);
                margin: 0 0 (_size(element-margin) * 0.5) 0;
                text-transform: uppercase;

                font-size: 1.35em;
                line-height: 1.75em;

                @include breakpoint('<=small') {
                        font-size: 1.1em;
                        line-height: 1.65em;
                }
        }
}

/* Page Wrapper + Menu */

#page-wrapper {
        @include vendor('transition', 'opacity #{_duration(menu)} ease');
        opacity: 1;
        padding-top: 3em;

        &:before {
                background: rgba(0,0,0,0);
                content: '';
                display: block;
                display: none;
                height: 100%;
                left: 0;
                position: fixed;
                top: 0;
                width: 100%;
                z-index: _misc(z-index-base) + 1;
        }

        a:hover {
                text-decoration: none;
                opacity: 1;
        }
}

/* Banner */

$arrow_size: 2vw;

.arrow-down-container {
        display: flex;
        align-items: center;
        justify-content: center;

        .arrow-down {
                box-sizing: border-box;
                height: $arrow_size;
                width: $arrow_size;
                border-style: solid;
                border-color: _palette(fg);
                border-width: 0px 2px 2px 0px;
                transform: rotate(45deg);
                transition: border-width 150ms ease-in-out;

                &:hover {
                        border-bottom-width: 4px;
                        border-right-width: 4px;
                }
        }
}

#banner {
        @include vendor('display', 'flex');
        @include vendor('flex-direction', 'column');
        @include vendor('justify-content', 'center');
        cursor: default;
        height: 100vh;
        min-height: 35em;
        overflow: hidden;
        position: relative;
        text-align: center;

        h2 {
                @include vendor('transform', 'scale(1)');
                @include vendor('transition', ('transform 0.5s ease', 'opacity 0.5s ease'));
                display: inline-block;
                font-size: 1.75em;
                opacity: 1;
                padding: 0.35em 1em;
                position: relative;
                z-index: 1;

                &:before, &:after {
                        @include vendor('transition', 'width 0.85s ease');
                        @include vendor('transition-delay', '0.25s');
                        background: _palette(fg-bold);
                        content: '';
                        display: block;
                        height: 2px;
                        position: absolute;
                        width: 100%;
                }

                &:before {
                        top: 0;
                        left: 0;
                }

                &:after {
                        bottom: 0;
                        right: 0;
                }
        }

        p {
                letter-spacing: _size(letter-spacing-alt);
                text-transform: uppercase;

                a {
                        color: inherit;
                }
        }

        .more {
                @include vendor('transition', ('transform 0.75s ease', 'opacity 0.75s ease'));
                @include vendor('transition-delay', '3.5s');
                @include vendor('transform', 'translateY(0)');
                position: absolute;
                bottom: 0;
                left: 50%;
                margin-left: -$arrow_size/2;
                margin-bottom: $arrow_size;
                opacity: 1;
                z-index: 1;
        }

        &:after {
                @include vendor('pointer-events', 'none');
                @include vendor('transition', 'opacity #{_duration(fadein)} ease-in-out');
                @include vendor('transition-delay', '1.25s');
                content: '';
                background: _palette(bg);
                display: block;
                width: 100%;
                height: 100%;
                position: absolute;
                left: 0;
                top: 0;
                opacity: 0;
        }

        @include breakpoint('<=small') {
                @include padding(7em, 3em);
                height: auto;
                min-height: 0;

                h2 {
                        font-size: 1.25em;
                }

                br {
                        display: none;
                }

                .more {
                        display: none;
                }
        }
}

body.is-preload {
        #banner {
                h2 {
                        @include vendor('transform', 'scale(0.95)');
                        opacity: 0;

                        &:before, &:after {
                                width: 0;
                        }
                }

                .more {
                        @include vendor('transform', 'translateY(8.5em)');
                        opacity: 0;
                }

                &:after {
                        opacity: 1;
                }
        }
}

/* Landing */

body.landing {
        #page-wrapper {
                background-attachment: fixed;
                background-position: center center;
                background-repeat: no-repeat;
                background-size: cover;
                padding-top: 0;
        }
}

body.is-mobile {
        &.landing {
                #page-wrapper {
                        background: none;
                }

                #banner {
                        background-position: center center;
                        background-repeat: no-repeat;
                        background-size: cover;
                }
        }
}